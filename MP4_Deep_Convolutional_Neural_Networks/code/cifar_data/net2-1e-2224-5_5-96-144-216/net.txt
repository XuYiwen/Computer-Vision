%% Define network 
% The part you have to modify
net.layers = {} ;

% 1 conv1
net.layers{end+1} = struct('type', 'conv', ...
  'filters', 1e-2*randn(5,5,3,96, 'single'), ...
  'biases', zeros(1, 96, 'single'), ...
  'filtersLearningRate', 1, ...
  'biasesLearningRate', 2, ...
  'stride', 1, ...
  'pad', 2) ;

% 8 relu
net.layers{end+1} = struct('type', 'relu') ;

% 2 pool1 (max pool)
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', [0 0 0 0]) ;
                       
% 3 conv2
net.layers{end+1} = struct('type', 'conv', ...
  'filters', 1e-2*randn(5,5,96,144, 'single'), ...
  'biases', zeros(1, 144, 'single'), ...
  'filtersLearningRate', 1, ...
  'biasesLearningRate', 2, ...
  'stride', 1, ...
  'pad', 2) ;

% 8 relu
net.layers{end+1} = struct('type', 'relu') ;

% 4 pool2 (max pool)
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', [0 0 0 0]) ;
                       
% 5 conv3
net.layers{end+1} = struct('type', 'conv', ...
  'filters', 1e-2*randn(5,5,144,216, 'single'), ...
  'biases', zeros(1, 216, 'single'), ...
  'filtersLearningRate', 1, ...
  'biasesLearningRate', 2, ...
  'stride', 1, ...
  'pad', 2) ;

% 8 relu
net.layers{end+1} = struct('type', 'relu') ;

% 9 pool4 (avg pool)
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'avg', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', [0 0 0 0]) ; 
                      
% 10 conv5 (fully connected)
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', 1e-4*randn(4,4,216,100, 'single'),...
                           'biases', zeros(1,100,'single'), ...
                           'filtersLearningRate', 1, ...
                           'biasesLearningRate', 2, ...
                           'stride', 1, ...
                           'pad', 0) ;
% 11 loss
net.layers{end+1} = struct('type', 'softmaxloss') ;
